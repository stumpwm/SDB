#+TITLE: The StumpWM Debugger

* Usage
  This minor mode enables the CLIM debugger for StumpWM (herafter referred to as
  the SWM Debugger or SDB). When invoked, SDB will open a static window on top
  of all other windows with a list of restarts, a backtrace, and an
  interactor. SDB can be enabled by running the command ~sdb-mode~, at which
  point any call to ~invoke-debugger~ will invoke SDB. In StumpWM unhandled top
  level conditions dont invoke the debugger unless
  ~stumpwm:*top-level-error-action*~ is set to ~:BREAK~. 

  Some errors, such as errors encountered when running commands, are handled
  automatically, eliding SDB. This can be frustrating when trying to debug an
  error within a command, and to this end the macro ~with-sdb~ is provided,
  which takes a condition type and when encountered invokes SDB.

** Window Configuration  
   SDB is intended to be useful regardless of the state of StumpWM. To achieve
   this even when StumpWM is incapable of mapping, focusing, or otherwise
   managing windows SDB is created as a static unmanaged window by setting
   override-redirect on the window. The window will resize and move itself based
   upon user settable values when it is opened.

** Errata and Footguns
   - Before using this, you *must* re-enable the debugger by calling
     ~sb-debug::enable-debugger~ in your stumpwmrc. StumpWM disables the
     debugger by default, and as such any calls to invoke the debugger will
     instead exit the process. 

   - When invoked from the generic function ~handle-top-level-condition~ a
     restart called ~abort-debugging~ will be present. This will throw to the
     top level and will likely crash StumpWM.

   - This system depends upon the CLIM debuger. (Mc)CLIM is a large system which
     can take quite a while to compile and load. If you find yourself using SDB
     often or wish to have it always available it may be useful to add
     ~#:clim-debugger~ as a dependency to StumpWM and recompile. This will dump
     an image containing CLIM.

   - The CLIM debugger has some quirks and bugs. When evaluating something in
     the selected frame (keybinding ~#\e~) it must be input as a string, and
     followed by a space. For example, to evaluate the form ~(print *myvar*)~
     in a frame, one would press ~e~, and then type ~"(print *myvar*)"~, and
     finally press space. After this the input is ready and can be submitted
     either with ~M-RET~ or by pressing the ~OK~ button. 
   
** Example Configuration
   This will set up SDB to catch any unhandled serious conditions, and will make
   it roughly fullscreen on 1920x1080 monitors.
   #+begin_src lisp
     (load "path/to/swm-debugger-mode.asd")
     (asdf:load-system :swm-debugger-mode)

     (defun enable-break-on-errors (&rest rest)
       (declare (ignore rest))
       (sb-debug::enable-debugger)
       (setf *top-level-error-action* :break))

     (defun disable-break-on-errors (&rest rest)
       (declare (ignore rest))
       (sb-debug::disable-debugger)
       (setf *top-level-error-action* :abort))

     (add-hook swm-debugger-mode:*swm-debugger-mode-enable-hook*
               #'enable-break-on-errors)
     (add-hook swm-debugger-mode:*swm-debugger-mode-disable-hook*
               #'disable-break-on-errors)

     (setf swm-debugger-mode:*debugger-width* 1900
           swm-debugger-mode:*debugger-height* 1000
           swm-debugger-mode:*debugger-coordinates* (cons 20 80))

     (swm-debugger-mode:sdb-mode)
   #+end_src
   
* Documentation

** Keybindings
   In SDB there are several keybindings, mostly inherited from the CLIM
   debugger. These are as follows:

   |------------+--------------------------------+------------------------------|
   | keybinding | action                         | command name                 |
   |------------+--------------------------------+------------------------------|
   | q          | Quit debugger                  | com-quit                     |
   | M-p        | Previous stack frame           | com-prev                     |
   | M-n        | Next stack frame               | com-next                     |
   | m          | Display more stack frames      | com-more                     |
   | e          | Eval in frame                  | com-eval                     |
   | TAB        | Toggle stack frame view        | com-toggle-active-frame-view |
   | r          | Refresh                        | com-refresh                  |
   | C-i        | Toggle interactor              | com-toggle-interactor        |
   | M-v        | Toggle display source location | com-show-locations           |
   |------------+--------------------------------+------------------------------|
   | [1-9]      | Invoke restart N               | invoke-restart-n             |
   |------------+--------------------------------+------------------------------|
   
** API  

*** Variable ~*DEBUGGER-WIDTH*~
    Controls the width of the debugger window, defaults to 480.

*** Variable ~*DEBUGGER-HEIGHT*~
    Controls the height of the debugger window, defaults to 600.

*** Macro ~WITH-SDB~
    ~(with-sdb condition-type &body body)~

    Establish a handler around /body/ which will invoke SDB on any signals of
    /condition-type/.

*** Command ~SDB-MODE~
    Enable SDB by setting the debugger hook to invoke SDB instead of the standard
    debugger.

*** Function ~INVOKE-SDB~
    ~(invoke-sdb condition)~
   
    Explicitly invoke SDB on /condition/.

